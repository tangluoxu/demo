package com.eshore.hb.btsp114busiservice.product.web.controller;


import com.eshore.hb.btsp114busiservice.product.entity.BusiVoice.BusiVoiceFile;
import com.eshore.hb.btsp114busiservice.product.service.BusiVoice.IBusiVoiceService;
import com.eshore.hb.btsp114busiservice.product.util.FastDFSClient;
import com.eshore.hb.btsp114busiservice.product.util.FileUtils;
import com.eshore.hb.btsp114busiservice.product.util.ResultMsg.ResultMsg;
import com.eshore.khala.common.model.SysUser;
import com.eshore.khala.core.starter.web.controller.BaseController;
import io.swagger.annotations.ApiOperation;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ClassPathResource;
import org.springframework.mock.web.MockMultipartFile;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.*;
import java.util.Base64;
import java.util.Date;
import java.util.List;

import com.alibaba.fastjson.JSONObject;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;

import javax.servlet.ServletInputStream;
import javax.servlet.http.HttpServletRequest;

@RestController
@RequestMapping("/api/busiVoice")
public class TBusiVoiceController extends BaseController {
    @Autowired
    private IBusiVoiceService busiVoiceService;

    final static Base64.Decoder decoder = Base64.getDecoder();
    //前端上传文件的方式
//    @ApiOperation(value = "保存商家信息和返回华为语音文件路径", notes = "参数如:<br>")
//    @RequestMapping("/importMusicFile")
//    @ResponseBody
//    public ResultMsg insertFile(HttpServletRequest request) {
//        //logger.info("filename: " + file.getOriginalFilename());
//        String busiId = request.getParameter("busiId");
//        logger.info("busiId: " + busiId);
//        MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
//        List<MultipartFile> files = multipartRequest.getFiles("file");
//        try{
//            for (MultipartFile file:files) {
//                logger.info("fileLength: " +file.getBytes().length);
////                if (!file.isEmpty()&&busiId!=null) {
////                    //判断导入的文件是否为mp3或wav文件
////                    if(isMP3OrWavFile(file.getOriginalFilename())){
//                    BusiVoiceFile obj = new BusiVoiceFile();
//                    ClassPathResource cpr = new ClassPathResource("fdfs_client.conf");
//                    FastDFSClient client = new FastDFSClient(cpr.getClassLoader().getResource("fdfs_client.conf").getPath());
//                    String uploadFile = client.uploadFile(file.getBytes(),lastName(file.getOriginalFilename()));
//                    logger.info("size: " + file.getBytes().length);
//                    logger.info("uploadFile: " + uploadFile);
//                    logger.info("文件根目录地址："+FastDFSClient.getHttpBasePath());
//                    String path = FastDFSClient.getHttpBasePath() + uploadFile;
//                    //上传文件到华为服务器
//                    //FtpUtils.uploadFile(ip,port,username, password, savePath,filename,inputStream);
//                    //存储语音文件文件资源服务器存储的路径
//                    obj.setFileName(file.getOriginalFilename());
//                    obj.setFilePath(path);
//                    obj.setBusiId(busiId);
//                    obj.setUpdateTime(new Date());
//                    logger.info("busiId: " + busiId);
//                    logger.info("path: " + path);
//                    busiVoiceService.insertFile(obj);
//                    Long date = new Date().getTime();
//                    JSONObject vo = new JSONObject();
//                    path = "/Share1/voicefile/"+date + ".wav";
//                    vo.put("path",path);
//                    return ResultMsg.success(vo);
////                }else{
////                    return ResultMsg.failed("导入文件不是mp3或者wav格式！");
////                }
//         //       }
//            }
//
//        } catch (Exception e) {
//            logger.error("导入文件错误:{}" + e);
//            ResultMsg.failed("导入文件错误！");
//        }
//        return ResultMsg.failed("文件导入失败！");
//    }
  //文件流转成字符串，通过BASE64编码后传来的方式
    @ApiOperation(value = "保存商家信息和返回华为语音文件路径", notes = "参数如:<br>")
    @RequestMapping("/importMusicFile")
    @ResponseBody
    public ResultMsg insertFile(@RequestBody JSONObject json) throws IOException {
        try{
            String busiId = json.get("busiId").toString();
            String fileStr = json.get("file").toString();
            if (busiId==null||fileStr==null){
                return ResultMsg.failed("必填参数不能为空！");
            }

            //对传过来的文件流字符串进行解码
            BASE64Decoder decoder = new BASE64Decoder();
            byte[] f = decoder.decodeBuffer(fileStr);
            InputStream in = new ByteArrayInputStream(f);
            ByteArrayOutputStream bos = new ByteArrayOutputStream();
            byte[] bytes = new byte[1024];
            byte[] buffer = null;
            int n;
            while ((n = in.read(bytes)) != -1){
                bos.write(bytes, 0, n);
            }
            logger.info("bos: " + bos.size());
            buffer = bos.toByteArray();
            InputStream is = new ByteArrayInputStream(bos.toByteArray());
            byte[] b = new byte[3];
            is.read(b, 0, b.length);
            String head = bytesToHexString(b);
            head = head.toUpperCase();
            logger.info("头文件是：" + head);
            String suffix = checkType(head);
            logger.info("后缀名是：" + suffix);
            logger.info("length：" + b.length);
            if (b.length>0&&busiId!=null) {

                //判断导入的文件是否为mp3或wav文件
                if(isMP3OrWavFile(suffix)){

                    BusiVoiceFile obj = new BusiVoiceFile();
                    ClassPathResource cpr = new ClassPathResource("fdfs_client.conf");
                    FastDFSClient client = new FastDFSClient(cpr.getClassLoader().getResource("fdfs_client.conf").getPath());
                    String uploadFile = client.uploadFile(buffer,suffix);
                    logger.info("uploadFile: " + uploadFile);
                    logger.info("文件根目录地址："+FastDFSClient.getHttpBasePath());
                    String path = FastDFSClient.getHttpBasePath() + uploadFile;
                    //上传文件到华为服务器
                    //FtpUtils.uploadFile(ip,port,username, password, savePath,filename,inputStream);
                    Long date = new Date().getTime();
                    //存储语音文件文件资源服务器存储的路径
                    obj.setFileName(date + "." +suffix);
                    logger.info("fileName: " + obj.getFileName());
                    obj.setFilePath(path);
                    obj.setBusiId(busiId);
                    obj.setUpdateTime(new Date());
                    logger.info("busiId: " + busiId);
                    logger.info("path: " + path);
                    busiVoiceService.insertFile(obj);
                    JSONObject vo = new JSONObject();
                    path = "/Share1/voicefile/"+date + ".wav";
                    vo.put("path",path);
                    return ResultMsg.success(vo);
                }else{
                    return ResultMsg.failed("导入文件不是mp3或者wav格式！");
                }
            }
        } catch (Exception e) {
            logger.error("导入文件错误:{}" + e);
            e.printStackTrace();
            ResultMsg.failed("导入文件错误！");
        }
        return ResultMsg.failed("文件导入失败！");
    }
    public static boolean isMP3OrWavFile(String fileName){
        boolean isSuc=false;
        if (StringUtils.isNotBlank(fileName)) {
            if (fileName.endsWith("wav")) {
                isSuc=true;
            }else if (fileName.endsWith("mp3")) {
                isSuc=true;
            }
        }
        return isSuc;
    }

    //使用lastIndexOf()结合subString()获取后缀名
    public String lastName(String fileName){
        if(fileName==null) return null;
        if(fileName.lastIndexOf(".")==-1){
            return "";//文件没有后缀名的情况
        }
        //此时返回的是带有 . 的后缀名，
        //return fileName.substring(fileName.lastIndexOf("."));

        return fileName.substring(fileName.lastIndexOf(".")+1);// 这种返回的是没有.的后缀名
    }

    public static String bytesToHexString(byte[] src) {
        StringBuilder stringBuilder = new StringBuilder();
        if (src == null || src.length <= 0) {
            return null;
        }
        for (int i = 0; i < src.length; i++) {
            int v = src[i] & 0xFF;
            String hv = Integer.toHexString(v);
            if (hv.length() < 2) {
                stringBuilder.append(0);
            }
            stringBuilder.append(hv);
        }
        return stringBuilder.toString();
    }

    public static String checkType(String s) {

        switch (s) {
            case "57415645": return "wav";
            case "494433":
            case "FFFB90": return "mp3";
            case "FFD8FF": return "jpg";
            default: return "0000";
        }
    }

}
